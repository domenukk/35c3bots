#!/usr/bin/env python3
host = "localhost:8075"

print(
    """
[CRYPTO]
This challenge is crypto
//TODO

The Flag is: 
    """
)

# tools.py, adapted from http://page.math.tu-berlin.de/~seidler/crypto_class/tools.py
def int_to_str(n):
    if n == 0:
        return ''
    return int_to_str(n // 256) + chr(n % 256)


def str_to_int(s):
    res = 0
    for char in s:
        res *= 256
        res += ord(char)
    return res


def bisect(f, low, up):
    flow = f(low)
    fup = f(up)
    if flow == 0:
        return low
    elif fup == 0:
        return up
    elif flow * fup > 0:
        raise Exception('bad interval')
    elif flow < 0:
        return _bisect(f, low, up)
    else:
        return _bisect(lambda x: -f(x), low, up)


def _bisect(f, low, up):
    """Find root by bisection. Require: f(low) < 0 < f(up)."""
    while True:
        if up <= low + 1:
            raise Exception('no root or bad function')
        mid = (low + up) // 2
        midval = f(mid)
        if midval == 0:
            return mid
        elif midval < 0:
            low = mid
        elif midval > 0:
            up = mid


enc = 650802889626540392576254226480769958677174063746262298961949406725587937603370598056914641680440287141866554424868358513810586735136666559905873773370795301824775736764582520414393058823900835653671443326759384479590622850329114068561701339992264327486363426970702107667234446480134526246514585103292832378240690398119481568246551291749012927947948046185733533974179911092159848587
e = 3
msg = bisect(lambda x: x ** e - enc, 0, 2 ** (200 * 8))
print(int_to_str(msg))
